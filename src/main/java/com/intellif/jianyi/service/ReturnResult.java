/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.intellif.jianyi.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-23")
public class ReturnResult implements org.apache.thrift.TBase<ReturnResult, ReturnResult._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnResult");

  private static final org.apache.thrift.protocol.TField ACK_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("ackResult", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SYS_ERR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("sysErrMsg", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReturnResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReturnResultTupleSchemeFactory());
  }

  private int ackResult; // required
  private SysException sysErrMsg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACK_RESULT((short)1, "ackResult"),
    SYS_ERR_MSG((short)2, "sysErrMsg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACK_RESULT
          return ACK_RESULT;
        case 2: // SYS_ERR_MSG
          return SYS_ERR_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACKRESULT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACK_RESULT, new org.apache.thrift.meta_data.FieldMetaData("ackResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SYS_ERR_MSG, new org.apache.thrift.meta_data.FieldMetaData("sysErrMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysException.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnResult.class, metaDataMap);
  }

  public ReturnResult() {
  }

  public ReturnResult(
    int ackResult,
    SysException sysErrMsg)
  {
    this();
    this.ackResult = ackResult;
    setAckResultIsSet(true);
    this.sysErrMsg = sysErrMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReturnResult(ReturnResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ackResult = other.ackResult;
    if (other.isSetSysErrMsg()) {
      this.sysErrMsg = new SysException(other.sysErrMsg);
    }
  }

  public ReturnResult deepCopy() {
    return new ReturnResult(this);
  }

  @Override
  public void clear() {
    setAckResultIsSet(false);
    this.ackResult = 0;
    this.sysErrMsg = null;
  }

  public int getAckResult() {
    return this.ackResult;
  }

  public void setAckResult(int ackResult) {
    this.ackResult = ackResult;
    setAckResultIsSet(true);
  }

  public void unsetAckResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACKRESULT_ISSET_ID);
  }

  /** Returns true if field ackResult is set (has been assigned a value) and false otherwise */
  public boolean isSetAckResult() {
    return EncodingUtils.testBit(__isset_bitfield, __ACKRESULT_ISSET_ID);
  }

  public void setAckResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACKRESULT_ISSET_ID, value);
  }

  public SysException getSysErrMsg() {
    return this.sysErrMsg;
  }

  public void setSysErrMsg(SysException sysErrMsg) {
    this.sysErrMsg = sysErrMsg;
  }

  public void unsetSysErrMsg() {
    this.sysErrMsg = null;
  }

  /** Returns true if field sysErrMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetSysErrMsg() {
    return this.sysErrMsg != null;
  }

  public void setSysErrMsgIsSet(boolean value) {
    if (!value) {
      this.sysErrMsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACK_RESULT:
      if (value == null) {
        unsetAckResult();
      } else {
        setAckResult((Integer)value);
      }
      break;

    case SYS_ERR_MSG:
      if (value == null) {
        unsetSysErrMsg();
      } else {
        setSysErrMsg((SysException)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACK_RESULT:
      return Integer.valueOf(getAckResult());

    case SYS_ERR_MSG:
      return getSysErrMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACK_RESULT:
      return isSetAckResult();
    case SYS_ERR_MSG:
      return isSetSysErrMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReturnResult)
      return this.equals((ReturnResult)that);
    return false;
  }

  public boolean equals(ReturnResult that) {
    if (that == null)
      return false;

    boolean this_present_ackResult = true;
    boolean that_present_ackResult = true;
    if (this_present_ackResult || that_present_ackResult) {
      if (!(this_present_ackResult && that_present_ackResult))
        return false;
      if (this.ackResult != that.ackResult)
        return false;
    }

    boolean this_present_sysErrMsg = true && this.isSetSysErrMsg();
    boolean that_present_sysErrMsg = true && that.isSetSysErrMsg();
    if (this_present_sysErrMsg || that_present_sysErrMsg) {
      if (!(this_present_sysErrMsg && that_present_sysErrMsg))
        return false;
      if (!this.sysErrMsg.equals(that.sysErrMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ackResult = true;
    list.add(present_ackResult);
    if (present_ackResult)
      list.add(ackResult);

    boolean present_sysErrMsg = true && (isSetSysErrMsg());
    list.add(present_sysErrMsg);
    if (present_sysErrMsg)
      list.add(sysErrMsg);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReturnResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAckResult()).compareTo(other.isSetAckResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAckResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ackResult, other.ackResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSysErrMsg()).compareTo(other.isSetSysErrMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysErrMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysErrMsg, other.sysErrMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReturnResult(");
    boolean first = true;

    sb.append("ackResult:");
    sb.append(this.ackResult);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sysErrMsg:");
    if (this.sysErrMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.sysErrMsg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sysErrMsg != null) {
      sysErrMsg.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReturnResultStandardSchemeFactory implements SchemeFactory {
    public ReturnResultStandardScheme getScheme() {
      return new ReturnResultStandardScheme();
    }
  }

  private static class ReturnResultStandardScheme extends StandardScheme<ReturnResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACK_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ackResult = iprot.readI32();
              struct.setAckResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYS_ERR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sysErrMsg = new SysException();
              struct.sysErrMsg.read(iprot);
              struct.setSysErrMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACK_RESULT_FIELD_DESC);
      oprot.writeI32(struct.ackResult);
      oprot.writeFieldEnd();
      if (struct.sysErrMsg != null) {
        oprot.writeFieldBegin(SYS_ERR_MSG_FIELD_DESC);
        struct.sysErrMsg.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReturnResultTupleSchemeFactory implements SchemeFactory {
    public ReturnResultTupleScheme getScheme() {
      return new ReturnResultTupleScheme();
    }
  }

  private static class ReturnResultTupleScheme extends TupleScheme<ReturnResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReturnResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAckResult()) {
        optionals.set(0);
      }
      if (struct.isSetSysErrMsg()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAckResult()) {
        oprot.writeI32(struct.ackResult);
      }
      if (struct.isSetSysErrMsg()) {
        struct.sysErrMsg.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReturnResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.ackResult = iprot.readI32();
        struct.setAckResultIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sysErrMsg = new SysException();
        struct.sysErrMsg.read(iprot);
        struct.setSysErrMsgIsSet(true);
      }
    }
  }

}

