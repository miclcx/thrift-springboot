/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.intellif.jianyi.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-23")
public class FaceSearchService {

  public interface Iface {

    public ReturnResult testConnect() throws org.apache.thrift.TException;

    public FaceSearchCountResult faceSearchCountAll(long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold) throws org.apache.thrift.TException;

    public FaceSearchCountResult faceSearchCountByCamera(long cameraId, long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void testConnect(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void faceSearchCountAll(long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void faceSearchCountByCamera(long cameraId, long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ReturnResult testConnect() throws org.apache.thrift.TException
    {
      send_testConnect();
      return recv_testConnect();
    }

    public void send_testConnect() throws org.apache.thrift.TException
    {
      testConnect_args args = new testConnect_args();
      sendBase("testConnect", args);
    }

    public ReturnResult recv_testConnect() throws org.apache.thrift.TException
    {
      testConnect_result result = new testConnect_result();
      receiveBase(result, "testConnect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testConnect failed: unknown result");
    }

    public FaceSearchCountResult faceSearchCountAll(long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold) throws org.apache.thrift.TException
    {
      send_faceSearchCountAll(startTime, endTime, faceFeature, algVersion, threshold);
      return recv_faceSearchCountAll();
    }

    public void send_faceSearchCountAll(long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold) throws org.apache.thrift.TException
    {
      faceSearchCountAll_args args = new faceSearchCountAll_args();
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setFaceFeature(faceFeature);
      args.setAlgVersion(algVersion);
      args.setThreshold(threshold);
      sendBase("faceSearchCountAll", args);
    }

    public FaceSearchCountResult recv_faceSearchCountAll() throws org.apache.thrift.TException
    {
      faceSearchCountAll_result result = new faceSearchCountAll_result();
      receiveBase(result, "faceSearchCountAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "faceSearchCountAll failed: unknown result");
    }

    public FaceSearchCountResult faceSearchCountByCamera(long cameraId, long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold) throws org.apache.thrift.TException
    {
      send_faceSearchCountByCamera(cameraId, startTime, endTime, faceFeature, algVersion, threshold);
      return recv_faceSearchCountByCamera();
    }

    public void send_faceSearchCountByCamera(long cameraId, long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold) throws org.apache.thrift.TException
    {
      faceSearchCountByCamera_args args = new faceSearchCountByCamera_args();
      args.setCameraId(cameraId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setFaceFeature(faceFeature);
      args.setAlgVersion(algVersion);
      args.setThreshold(threshold);
      sendBase("faceSearchCountByCamera", args);
    }

    public FaceSearchCountResult recv_faceSearchCountByCamera() throws org.apache.thrift.TException
    {
      faceSearchCountByCamera_result result = new faceSearchCountByCamera_result();
      receiveBase(result, "faceSearchCountByCamera");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "faceSearchCountByCamera failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void testConnect(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      testConnect_call method_call = new testConnect_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testConnect_call extends org.apache.thrift.async.TAsyncMethodCall {
      public testConnect_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testConnect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testConnect_args args = new testConnect_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testConnect();
      }
    }

    public void faceSearchCountAll(long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      faceSearchCountAll_call method_call = new faceSearchCountAll_call(startTime, endTime, faceFeature, algVersion, threshold, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class faceSearchCountAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long startTime;
      private long endTime;
      private ByteBuffer faceFeature;
      private int algVersion;
      private double threshold;
      public faceSearchCountAll_call(long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startTime = startTime;
        this.endTime = endTime;
        this.faceFeature = faceFeature;
        this.algVersion = algVersion;
        this.threshold = threshold;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("faceSearchCountAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        faceSearchCountAll_args args = new faceSearchCountAll_args();
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setFaceFeature(faceFeature);
        args.setAlgVersion(algVersion);
        args.setThreshold(threshold);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FaceSearchCountResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_faceSearchCountAll();
      }
    }

    public void faceSearchCountByCamera(long cameraId, long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      faceSearchCountByCamera_call method_call = new faceSearchCountByCamera_call(cameraId, startTime, endTime, faceFeature, algVersion, threshold, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class faceSearchCountByCamera_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long cameraId;
      private long startTime;
      private long endTime;
      private ByteBuffer faceFeature;
      private int algVersion;
      private double threshold;
      public faceSearchCountByCamera_call(long cameraId, long startTime, long endTime, ByteBuffer faceFeature, int algVersion, double threshold, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cameraId = cameraId;
        this.startTime = startTime;
        this.endTime = endTime;
        this.faceFeature = faceFeature;
        this.algVersion = algVersion;
        this.threshold = threshold;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("faceSearchCountByCamera", org.apache.thrift.protocol.TMessageType.CALL, 0));
        faceSearchCountByCamera_args args = new faceSearchCountByCamera_args();
        args.setCameraId(cameraId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setFaceFeature(faceFeature);
        args.setAlgVersion(algVersion);
        args.setThreshold(threshold);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FaceSearchCountResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_faceSearchCountByCamera();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("testConnect", new testConnect());
      processMap.put("faceSearchCountAll", new faceSearchCountAll());
      processMap.put("faceSearchCountByCamera", new faceSearchCountByCamera());
      return processMap;
    }

    public static class testConnect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testConnect_args> {
      public testConnect() {
        super("testConnect");
      }

      public testConnect_args getEmptyArgsInstance() {
        return new testConnect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public testConnect_result getResult(I iface, testConnect_args args) throws org.apache.thrift.TException {
        testConnect_result result = new testConnect_result();
        result.success = iface.testConnect();
        return result;
      }
    }

    public static class faceSearchCountAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, faceSearchCountAll_args> {
      public faceSearchCountAll() {
        super("faceSearchCountAll");
      }

      public faceSearchCountAll_args getEmptyArgsInstance() {
        return new faceSearchCountAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public faceSearchCountAll_result getResult(I iface, faceSearchCountAll_args args) throws org.apache.thrift.TException {
        faceSearchCountAll_result result = new faceSearchCountAll_result();
        result.success = iface.faceSearchCountAll(args.startTime, args.endTime, args.faceFeature, args.algVersion, args.threshold);
        return result;
      }
    }

    public static class faceSearchCountByCamera<I extends Iface> extends org.apache.thrift.ProcessFunction<I, faceSearchCountByCamera_args> {
      public faceSearchCountByCamera() {
        super("faceSearchCountByCamera");
      }

      public faceSearchCountByCamera_args getEmptyArgsInstance() {
        return new faceSearchCountByCamera_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public faceSearchCountByCamera_result getResult(I iface, faceSearchCountByCamera_args args) throws org.apache.thrift.TException {
        faceSearchCountByCamera_result result = new faceSearchCountByCamera_result();
        result.success = iface.faceSearchCountByCamera(args.cameraId, args.startTime, args.endTime, args.faceFeature, args.algVersion, args.threshold);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("testConnect", new testConnect());
      processMap.put("faceSearchCountAll", new faceSearchCountAll());
      processMap.put("faceSearchCountByCamera", new faceSearchCountByCamera());
      return processMap;
    }

    public static class testConnect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, testConnect_args, ReturnResult> {
      public testConnect() {
        super("testConnect");
      }

      public testConnect_args getEmptyArgsInstance() {
        return new testConnect_args();
      }

      public AsyncMethodCallback<ReturnResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnResult>() { 
          public void onComplete(ReturnResult o) {
            testConnect_result result = new testConnect_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            testConnect_result result = new testConnect_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, testConnect_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnResult> resultHandler) throws TException {
        iface.testConnect(resultHandler);
      }
    }

    public static class faceSearchCountAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, faceSearchCountAll_args, FaceSearchCountResult> {
      public faceSearchCountAll() {
        super("faceSearchCountAll");
      }

      public faceSearchCountAll_args getEmptyArgsInstance() {
        return new faceSearchCountAll_args();
      }

      public AsyncMethodCallback<FaceSearchCountResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FaceSearchCountResult>() { 
          public void onComplete(FaceSearchCountResult o) {
            faceSearchCountAll_result result = new faceSearchCountAll_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            faceSearchCountAll_result result = new faceSearchCountAll_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, faceSearchCountAll_args args, org.apache.thrift.async.AsyncMethodCallback<FaceSearchCountResult> resultHandler) throws TException {
        iface.faceSearchCountAll(args.startTime, args.endTime, args.faceFeature, args.algVersion, args.threshold,resultHandler);
      }
    }

    public static class faceSearchCountByCamera<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, faceSearchCountByCamera_args, FaceSearchCountResult> {
      public faceSearchCountByCamera() {
        super("faceSearchCountByCamera");
      }

      public faceSearchCountByCamera_args getEmptyArgsInstance() {
        return new faceSearchCountByCamera_args();
      }

      public AsyncMethodCallback<FaceSearchCountResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FaceSearchCountResult>() { 
          public void onComplete(FaceSearchCountResult o) {
            faceSearchCountByCamera_result result = new faceSearchCountByCamera_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            faceSearchCountByCamera_result result = new faceSearchCountByCamera_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, faceSearchCountByCamera_args args, org.apache.thrift.async.AsyncMethodCallback<FaceSearchCountResult> resultHandler) throws TException {
        iface.faceSearchCountByCamera(args.cameraId, args.startTime, args.endTime, args.faceFeature, args.algVersion, args.threshold,resultHandler);
      }
    }

  }

  public static class testConnect_args implements org.apache.thrift.TBase<testConnect_args, testConnect_args._Fields>, java.io.Serializable, Cloneable, Comparable<testConnect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testConnect_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testConnect_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testConnect_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testConnect_args.class, metaDataMap);
    }

    public testConnect_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testConnect_args(testConnect_args other) {
    }

    public testConnect_args deepCopy() {
      return new testConnect_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testConnect_args)
        return this.equals((testConnect_args)that);
      return false;
    }

    public boolean equals(testConnect_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(testConnect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testConnect_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testConnect_argsStandardSchemeFactory implements SchemeFactory {
      public testConnect_argsStandardScheme getScheme() {
        return new testConnect_argsStandardScheme();
      }
    }

    private static class testConnect_argsStandardScheme extends StandardScheme<testConnect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testConnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testConnect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testConnect_argsTupleSchemeFactory implements SchemeFactory {
      public testConnect_argsTupleScheme getScheme() {
        return new testConnect_argsTupleScheme();
      }
    }

    private static class testConnect_argsTupleScheme extends TupleScheme<testConnect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testConnect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testConnect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class testConnect_result implements org.apache.thrift.TBase<testConnect_result, testConnect_result._Fields>, java.io.Serializable, Cloneable, Comparable<testConnect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testConnect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testConnect_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testConnect_resultTupleSchemeFactory());
    }

    private ReturnResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testConnect_result.class, metaDataMap);
    }

    public testConnect_result() {
    }

    public testConnect_result(
      ReturnResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testConnect_result(testConnect_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnResult(other.success);
      }
    }

    public testConnect_result deepCopy() {
      return new testConnect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnResult getSuccess() {
      return this.success;
    }

    public void setSuccess(ReturnResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testConnect_result)
        return this.equals((testConnect_result)that);
      return false;
    }

    public boolean equals(testConnect_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(testConnect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testConnect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testConnect_resultStandardSchemeFactory implements SchemeFactory {
      public testConnect_resultStandardScheme getScheme() {
        return new testConnect_resultStandardScheme();
      }
    }

    private static class testConnect_resultStandardScheme extends StandardScheme<testConnect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testConnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testConnect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testConnect_resultTupleSchemeFactory implements SchemeFactory {
      public testConnect_resultTupleScheme getScheme() {
        return new testConnect_resultTupleScheme();
      }
    }

    private static class testConnect_resultTupleScheme extends TupleScheme<testConnect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testConnect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testConnect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class faceSearchCountAll_args implements org.apache.thrift.TBase<faceSearchCountAll_args, faceSearchCountAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<faceSearchCountAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("faceSearchCountAll_args");

    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField FACE_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("faceFeature", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ALG_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("algVersion", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new faceSearchCountAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new faceSearchCountAll_argsTupleSchemeFactory());
    }

    private long startTime; // required
    private long endTime; // required
    private ByteBuffer faceFeature; // required
    private int algVersion; // required
    private double threshold; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_TIME((short)1, "startTime"),
      END_TIME((short)2, "endTime"),
      FACE_FEATURE((short)3, "faceFeature"),
      ALG_VERSION((short)4, "algVersion"),
      THRESHOLD((short)5, "threshold");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_TIME
            return START_TIME;
          case 2: // END_TIME
            return END_TIME;
          case 3: // FACE_FEATURE
            return FACE_FEATURE;
          case 4: // ALG_VERSION
            return ALG_VERSION;
          case 5: // THRESHOLD
            return THRESHOLD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTTIME_ISSET_ID = 0;
    private static final int __ENDTIME_ISSET_ID = 1;
    private static final int __ALGVERSION_ISSET_ID = 2;
    private static final int __THRESHOLD_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FACE_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("faceFeature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.ALG_VERSION, new org.apache.thrift.meta_data.FieldMetaData("algVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("threshold", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(faceSearchCountAll_args.class, metaDataMap);
    }

    public faceSearchCountAll_args() {
    }

    public faceSearchCountAll_args(
      long startTime,
      long endTime,
      ByteBuffer faceFeature,
      int algVersion,
      double threshold)
    {
      this();
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
      this.faceFeature = org.apache.thrift.TBaseHelper.copyBinary(faceFeature);
      this.algVersion = algVersion;
      setAlgVersionIsSet(true);
      this.threshold = threshold;
      setThresholdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public faceSearchCountAll_args(faceSearchCountAll_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
      if (other.isSetFaceFeature()) {
        this.faceFeature = org.apache.thrift.TBaseHelper.copyBinary(other.faceFeature);
      }
      this.algVersion = other.algVersion;
      this.threshold = other.threshold;
    }

    public faceSearchCountAll_args deepCopy() {
      return new faceSearchCountAll_args(this);
    }

    @Override
    public void clear() {
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
      this.faceFeature = null;
      setAlgVersionIsSet(false);
      this.algVersion = 0;
      setThresholdIsSet(false);
      this.threshold = 0.0;
    }

    public long getStartTime() {
      return this.startTime;
    }

    public void setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public void setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public byte[] getFaceFeature() {
      setFaceFeature(org.apache.thrift.TBaseHelper.rightSize(faceFeature));
      return faceFeature == null ? null : faceFeature.array();
    }

    public ByteBuffer bufferForFaceFeature() {
      return org.apache.thrift.TBaseHelper.copyBinary(faceFeature);
    }

    public void setFaceFeature(byte[] faceFeature) {
      this.faceFeature = faceFeature == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(faceFeature, faceFeature.length));
    }

    public void setFaceFeature(ByteBuffer faceFeature) {
      this.faceFeature = org.apache.thrift.TBaseHelper.copyBinary(faceFeature);
    }

    public void unsetFaceFeature() {
      this.faceFeature = null;
    }

    /** Returns true if field faceFeature is set (has been assigned a value) and false otherwise */
    public boolean isSetFaceFeature() {
      return this.faceFeature != null;
    }

    public void setFaceFeatureIsSet(boolean value) {
      if (!value) {
        this.faceFeature = null;
      }
    }

    public int getAlgVersion() {
      return this.algVersion;
    }

    public void setAlgVersion(int algVersion) {
      this.algVersion = algVersion;
      setAlgVersionIsSet(true);
    }

    public void unsetAlgVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALGVERSION_ISSET_ID);
    }

    /** Returns true if field algVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetAlgVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __ALGVERSION_ISSET_ID);
    }

    public void setAlgVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALGVERSION_ISSET_ID, value);
    }

    public double getThreshold() {
      return this.threshold;
    }

    public void setThreshold(double threshold) {
      this.threshold = threshold;
      setThresholdIsSet(true);
    }

    public void unsetThreshold() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    /** Returns true if field threshold is set (has been assigned a value) and false otherwise */
    public boolean isSetThreshold() {
      return EncodingUtils.testBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    public void setThresholdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THRESHOLD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      case FACE_FEATURE:
        if (value == null) {
          unsetFaceFeature();
        } else {
          setFaceFeature((ByteBuffer)value);
        }
        break;

      case ALG_VERSION:
        if (value == null) {
          unsetAlgVersion();
        } else {
          setAlgVersion((Integer)value);
        }
        break;

      case THRESHOLD:
        if (value == null) {
          unsetThreshold();
        } else {
          setThreshold((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      case FACE_FEATURE:
        return getFaceFeature();

      case ALG_VERSION:
        return Integer.valueOf(getAlgVersion());

      case THRESHOLD:
        return Double.valueOf(getThreshold());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case FACE_FEATURE:
        return isSetFaceFeature();
      case ALG_VERSION:
        return isSetAlgVersion();
      case THRESHOLD:
        return isSetThreshold();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof faceSearchCountAll_args)
        return this.equals((faceSearchCountAll_args)that);
      return false;
    }

    public boolean equals(faceSearchCountAll_args that) {
      if (that == null)
        return false;

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      boolean this_present_faceFeature = true && this.isSetFaceFeature();
      boolean that_present_faceFeature = true && that.isSetFaceFeature();
      if (this_present_faceFeature || that_present_faceFeature) {
        if (!(this_present_faceFeature && that_present_faceFeature))
          return false;
        if (!this.faceFeature.equals(that.faceFeature))
          return false;
      }

      boolean this_present_algVersion = true;
      boolean that_present_algVersion = true;
      if (this_present_algVersion || that_present_algVersion) {
        if (!(this_present_algVersion && that_present_algVersion))
          return false;
        if (this.algVersion != that.algVersion)
          return false;
      }

      boolean this_present_threshold = true;
      boolean that_present_threshold = true;
      if (this_present_threshold || that_present_threshold) {
        if (!(this_present_threshold && that_present_threshold))
          return false;
        if (this.threshold != that.threshold)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      boolean present_faceFeature = true && (isSetFaceFeature());
      list.add(present_faceFeature);
      if (present_faceFeature)
        list.add(faceFeature);

      boolean present_algVersion = true;
      list.add(present_algVersion);
      if (present_algVersion)
        list.add(algVersion);

      boolean present_threshold = true;
      list.add(present_threshold);
      if (present_threshold)
        list.add(threshold);

      return list.hashCode();
    }

    @Override
    public int compareTo(faceSearchCountAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaceFeature()).compareTo(other.isSetFaceFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaceFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceFeature, other.faceFeature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlgVersion()).compareTo(other.isSetAlgVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlgVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algVersion, other.algVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetThreshold()).compareTo(other.isSetThreshold());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreshold()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threshold, other.threshold);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("faceSearchCountAll_args(");
      boolean first = true;

      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("faceFeature:");
      if (this.faceFeature == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.faceFeature, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("algVersion:");
      sb.append(this.algVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("threshold:");
      sb.append(this.threshold);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (!isSetStartTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' is unset! Struct:" + toString());
      }

      if (!isSetEndTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' is unset! Struct:" + toString());
      }

      if (!isSetFaceFeature()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'faceFeature' is unset! Struct:" + toString());
      }

      if (!isSetAlgVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'algVersion' is unset! Struct:" + toString());
      }

      if (!isSetThreshold()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'threshold' is unset! Struct:" + toString());
      }

      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class faceSearchCountAll_argsStandardSchemeFactory implements SchemeFactory {
      public faceSearchCountAll_argsStandardScheme getScheme() {
        return new faceSearchCountAll_argsStandardScheme();
      }
    }

    private static class faceSearchCountAll_argsStandardScheme extends StandardScheme<faceSearchCountAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, faceSearchCountAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FACE_FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.faceFeature = iprot.readBinary();
                struct.setFaceFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALG_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.algVersion = iprot.readI32();
                struct.setAlgVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // THRESHOLD
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.threshold = iprot.readDouble();
                struct.setThresholdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, faceSearchCountAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        if (struct.faceFeature != null) {
          oprot.writeFieldBegin(FACE_FEATURE_FIELD_DESC);
          oprot.writeBinary(struct.faceFeature);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ALG_VERSION_FIELD_DESC);
        oprot.writeI32(struct.algVersion);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.threshold);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class faceSearchCountAll_argsTupleSchemeFactory implements SchemeFactory {
      public faceSearchCountAll_argsTupleScheme getScheme() {
        return new faceSearchCountAll_argsTupleScheme();
      }
    }

    private static class faceSearchCountAll_argsTupleScheme extends TupleScheme<faceSearchCountAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, faceSearchCountAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI64(struct.startTime);
        oprot.writeI64(struct.endTime);
        oprot.writeBinary(struct.faceFeature);
        oprot.writeI32(struct.algVersion);
        oprot.writeDouble(struct.threshold);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, faceSearchCountAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
        struct.faceFeature = iprot.readBinary();
        struct.setFaceFeatureIsSet(true);
        struct.algVersion = iprot.readI32();
        struct.setAlgVersionIsSet(true);
        struct.threshold = iprot.readDouble();
        struct.setThresholdIsSet(true);
      }
    }

  }

  public static class faceSearchCountAll_result implements org.apache.thrift.TBase<faceSearchCountAll_result, faceSearchCountAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<faceSearchCountAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("faceSearchCountAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new faceSearchCountAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new faceSearchCountAll_resultTupleSchemeFactory());
    }

    private FaceSearchCountResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FaceSearchCountResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(faceSearchCountAll_result.class, metaDataMap);
    }

    public faceSearchCountAll_result() {
    }

    public faceSearchCountAll_result(
      FaceSearchCountResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public faceSearchCountAll_result(faceSearchCountAll_result other) {
      if (other.isSetSuccess()) {
        this.success = new FaceSearchCountResult(other.success);
      }
    }

    public faceSearchCountAll_result deepCopy() {
      return new faceSearchCountAll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FaceSearchCountResult getSuccess() {
      return this.success;
    }

    public void setSuccess(FaceSearchCountResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FaceSearchCountResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof faceSearchCountAll_result)
        return this.equals((faceSearchCountAll_result)that);
      return false;
    }

    public boolean equals(faceSearchCountAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(faceSearchCountAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("faceSearchCountAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class faceSearchCountAll_resultStandardSchemeFactory implements SchemeFactory {
      public faceSearchCountAll_resultStandardScheme getScheme() {
        return new faceSearchCountAll_resultStandardScheme();
      }
    }

    private static class faceSearchCountAll_resultStandardScheme extends StandardScheme<faceSearchCountAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, faceSearchCountAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FaceSearchCountResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, faceSearchCountAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class faceSearchCountAll_resultTupleSchemeFactory implements SchemeFactory {
      public faceSearchCountAll_resultTupleScheme getScheme() {
        return new faceSearchCountAll_resultTupleScheme();
      }
    }

    private static class faceSearchCountAll_resultTupleScheme extends TupleScheme<faceSearchCountAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, faceSearchCountAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, faceSearchCountAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FaceSearchCountResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class faceSearchCountByCamera_args implements org.apache.thrift.TBase<faceSearchCountByCamera_args, faceSearchCountByCamera_args._Fields>, java.io.Serializable, Cloneable, Comparable<faceSearchCountByCamera_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("faceSearchCountByCamera_args");

    private static final org.apache.thrift.protocol.TField CAMERA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cameraId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField FACE_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("faceFeature", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ALG_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("algVersion", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new faceSearchCountByCamera_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new faceSearchCountByCamera_argsTupleSchemeFactory());
    }

    private long cameraId; // required
    private long startTime; // required
    private long endTime; // required
    private ByteBuffer faceFeature; // required
    private int algVersion; // required
    private double threshold; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CAMERA_ID((short)1, "cameraId"),
      START_TIME((short)2, "startTime"),
      END_TIME((short)3, "endTime"),
      FACE_FEATURE((short)4, "faceFeature"),
      ALG_VERSION((short)5, "algVersion"),
      THRESHOLD((short)6, "threshold");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CAMERA_ID
            return CAMERA_ID;
          case 2: // START_TIME
            return START_TIME;
          case 3: // END_TIME
            return END_TIME;
          case 4: // FACE_FEATURE
            return FACE_FEATURE;
          case 5: // ALG_VERSION
            return ALG_VERSION;
          case 6: // THRESHOLD
            return THRESHOLD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CAMERAID_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private static final int __ALGVERSION_ISSET_ID = 3;
    private static final int __THRESHOLD_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CAMERA_ID, new org.apache.thrift.meta_data.FieldMetaData("cameraId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FACE_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("faceFeature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.ALG_VERSION, new org.apache.thrift.meta_data.FieldMetaData("algVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("threshold", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(faceSearchCountByCamera_args.class, metaDataMap);
    }

    public faceSearchCountByCamera_args() {
    }

    public faceSearchCountByCamera_args(
      long cameraId,
      long startTime,
      long endTime,
      ByteBuffer faceFeature,
      int algVersion,
      double threshold)
    {
      this();
      this.cameraId = cameraId;
      setCameraIdIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
      this.faceFeature = org.apache.thrift.TBaseHelper.copyBinary(faceFeature);
      this.algVersion = algVersion;
      setAlgVersionIsSet(true);
      this.threshold = threshold;
      setThresholdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public faceSearchCountByCamera_args(faceSearchCountByCamera_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cameraId = other.cameraId;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
      if (other.isSetFaceFeature()) {
        this.faceFeature = org.apache.thrift.TBaseHelper.copyBinary(other.faceFeature);
      }
      this.algVersion = other.algVersion;
      this.threshold = other.threshold;
    }

    public faceSearchCountByCamera_args deepCopy() {
      return new faceSearchCountByCamera_args(this);
    }

    @Override
    public void clear() {
      setCameraIdIsSet(false);
      this.cameraId = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
      this.faceFeature = null;
      setAlgVersionIsSet(false);
      this.algVersion = 0;
      setThresholdIsSet(false);
      this.threshold = 0.0;
    }

    public long getCameraId() {
      return this.cameraId;
    }

    public void setCameraId(long cameraId) {
      this.cameraId = cameraId;
      setCameraIdIsSet(true);
    }

    public void unsetCameraId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMERAID_ISSET_ID);
    }

    /** Returns true if field cameraId is set (has been assigned a value) and false otherwise */
    public boolean isSetCameraId() {
      return EncodingUtils.testBit(__isset_bitfield, __CAMERAID_ISSET_ID);
    }

    public void setCameraIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMERAID_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public void setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public void setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public byte[] getFaceFeature() {
      setFaceFeature(org.apache.thrift.TBaseHelper.rightSize(faceFeature));
      return faceFeature == null ? null : faceFeature.array();
    }

    public ByteBuffer bufferForFaceFeature() {
      return org.apache.thrift.TBaseHelper.copyBinary(faceFeature);
    }

    public void setFaceFeature(byte[] faceFeature) {
      this.faceFeature = faceFeature == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(faceFeature, faceFeature.length));
    }

    public void setFaceFeature(ByteBuffer faceFeature) {
      this.faceFeature = org.apache.thrift.TBaseHelper.copyBinary(faceFeature);
    }

    public void unsetFaceFeature() {
      this.faceFeature = null;
    }

    /** Returns true if field faceFeature is set (has been assigned a value) and false otherwise */
    public boolean isSetFaceFeature() {
      return this.faceFeature != null;
    }

    public void setFaceFeatureIsSet(boolean value) {
      if (!value) {
        this.faceFeature = null;
      }
    }

    public int getAlgVersion() {
      return this.algVersion;
    }

    public void setAlgVersion(int algVersion) {
      this.algVersion = algVersion;
      setAlgVersionIsSet(true);
    }

    public void unsetAlgVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALGVERSION_ISSET_ID);
    }

    /** Returns true if field algVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetAlgVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __ALGVERSION_ISSET_ID);
    }

    public void setAlgVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALGVERSION_ISSET_ID, value);
    }

    public double getThreshold() {
      return this.threshold;
    }

    public void setThreshold(double threshold) {
      this.threshold = threshold;
      setThresholdIsSet(true);
    }

    public void unsetThreshold() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    /** Returns true if field threshold is set (has been assigned a value) and false otherwise */
    public boolean isSetThreshold() {
      return EncodingUtils.testBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    public void setThresholdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THRESHOLD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CAMERA_ID:
        if (value == null) {
          unsetCameraId();
        } else {
          setCameraId((Long)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      case FACE_FEATURE:
        if (value == null) {
          unsetFaceFeature();
        } else {
          setFaceFeature((ByteBuffer)value);
        }
        break;

      case ALG_VERSION:
        if (value == null) {
          unsetAlgVersion();
        } else {
          setAlgVersion((Integer)value);
        }
        break;

      case THRESHOLD:
        if (value == null) {
          unsetThreshold();
        } else {
          setThreshold((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CAMERA_ID:
        return Long.valueOf(getCameraId());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      case FACE_FEATURE:
        return getFaceFeature();

      case ALG_VERSION:
        return Integer.valueOf(getAlgVersion());

      case THRESHOLD:
        return Double.valueOf(getThreshold());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CAMERA_ID:
        return isSetCameraId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case FACE_FEATURE:
        return isSetFaceFeature();
      case ALG_VERSION:
        return isSetAlgVersion();
      case THRESHOLD:
        return isSetThreshold();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof faceSearchCountByCamera_args)
        return this.equals((faceSearchCountByCamera_args)that);
      return false;
    }

    public boolean equals(faceSearchCountByCamera_args that) {
      if (that == null)
        return false;

      boolean this_present_cameraId = true;
      boolean that_present_cameraId = true;
      if (this_present_cameraId || that_present_cameraId) {
        if (!(this_present_cameraId && that_present_cameraId))
          return false;
        if (this.cameraId != that.cameraId)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      boolean this_present_faceFeature = true && this.isSetFaceFeature();
      boolean that_present_faceFeature = true && that.isSetFaceFeature();
      if (this_present_faceFeature || that_present_faceFeature) {
        if (!(this_present_faceFeature && that_present_faceFeature))
          return false;
        if (!this.faceFeature.equals(that.faceFeature))
          return false;
      }

      boolean this_present_algVersion = true;
      boolean that_present_algVersion = true;
      if (this_present_algVersion || that_present_algVersion) {
        if (!(this_present_algVersion && that_present_algVersion))
          return false;
        if (this.algVersion != that.algVersion)
          return false;
      }

      boolean this_present_threshold = true;
      boolean that_present_threshold = true;
      if (this_present_threshold || that_present_threshold) {
        if (!(this_present_threshold && that_present_threshold))
          return false;
        if (this.threshold != that.threshold)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cameraId = true;
      list.add(present_cameraId);
      if (present_cameraId)
        list.add(cameraId);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      boolean present_faceFeature = true && (isSetFaceFeature());
      list.add(present_faceFeature);
      if (present_faceFeature)
        list.add(faceFeature);

      boolean present_algVersion = true;
      list.add(present_algVersion);
      if (present_algVersion)
        list.add(algVersion);

      boolean present_threshold = true;
      list.add(present_threshold);
      if (present_threshold)
        list.add(threshold);

      return list.hashCode();
    }

    @Override
    public int compareTo(faceSearchCountByCamera_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCameraId()).compareTo(other.isSetCameraId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCameraId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cameraId, other.cameraId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFaceFeature()).compareTo(other.isSetFaceFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFaceFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceFeature, other.faceFeature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlgVersion()).compareTo(other.isSetAlgVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlgVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algVersion, other.algVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetThreshold()).compareTo(other.isSetThreshold());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreshold()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threshold, other.threshold);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("faceSearchCountByCamera_args(");
      boolean first = true;

      sb.append("cameraId:");
      sb.append(this.cameraId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("faceFeature:");
      if (this.faceFeature == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.faceFeature, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("algVersion:");
      sb.append(this.algVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("threshold:");
      sb.append(this.threshold);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (!isSetCameraId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cameraId' is unset! Struct:" + toString());
      }

      if (!isSetStartTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' is unset! Struct:" + toString());
      }

      if (!isSetEndTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' is unset! Struct:" + toString());
      }

      if (!isSetFaceFeature()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'faceFeature' is unset! Struct:" + toString());
      }

      if (!isSetAlgVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'algVersion' is unset! Struct:" + toString());
      }

      if (!isSetThreshold()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'threshold' is unset! Struct:" + toString());
      }

      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class faceSearchCountByCamera_argsStandardSchemeFactory implements SchemeFactory {
      public faceSearchCountByCamera_argsStandardScheme getScheme() {
        return new faceSearchCountByCamera_argsStandardScheme();
      }
    }

    private static class faceSearchCountByCamera_argsStandardScheme extends StandardScheme<faceSearchCountByCamera_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, faceSearchCountByCamera_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CAMERA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cameraId = iprot.readI64();
                struct.setCameraIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FACE_FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.faceFeature = iprot.readBinary();
                struct.setFaceFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ALG_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.algVersion = iprot.readI32();
                struct.setAlgVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // THRESHOLD
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.threshold = iprot.readDouble();
                struct.setThresholdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, faceSearchCountByCamera_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CAMERA_ID_FIELD_DESC);
        oprot.writeI64(struct.cameraId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        if (struct.faceFeature != null) {
          oprot.writeFieldBegin(FACE_FEATURE_FIELD_DESC);
          oprot.writeBinary(struct.faceFeature);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ALG_VERSION_FIELD_DESC);
        oprot.writeI32(struct.algVersion);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.threshold);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class faceSearchCountByCamera_argsTupleSchemeFactory implements SchemeFactory {
      public faceSearchCountByCamera_argsTupleScheme getScheme() {
        return new faceSearchCountByCamera_argsTupleScheme();
      }
    }

    private static class faceSearchCountByCamera_argsTupleScheme extends TupleScheme<faceSearchCountByCamera_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, faceSearchCountByCamera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI64(struct.cameraId);
        oprot.writeI64(struct.startTime);
        oprot.writeI64(struct.endTime);
        oprot.writeBinary(struct.faceFeature);
        oprot.writeI32(struct.algVersion);
        oprot.writeDouble(struct.threshold);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, faceSearchCountByCamera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.cameraId = iprot.readI64();
        struct.setCameraIdIsSet(true);
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
        struct.faceFeature = iprot.readBinary();
        struct.setFaceFeatureIsSet(true);
        struct.algVersion = iprot.readI32();
        struct.setAlgVersionIsSet(true);
        struct.threshold = iprot.readDouble();
        struct.setThresholdIsSet(true);
      }
    }

  }

  public static class faceSearchCountByCamera_result implements org.apache.thrift.TBase<faceSearchCountByCamera_result, faceSearchCountByCamera_result._Fields>, java.io.Serializable, Cloneable, Comparable<faceSearchCountByCamera_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("faceSearchCountByCamera_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new faceSearchCountByCamera_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new faceSearchCountByCamera_resultTupleSchemeFactory());
    }

    private FaceSearchCountResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FaceSearchCountResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(faceSearchCountByCamera_result.class, metaDataMap);
    }

    public faceSearchCountByCamera_result() {
    }

    public faceSearchCountByCamera_result(
      FaceSearchCountResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public faceSearchCountByCamera_result(faceSearchCountByCamera_result other) {
      if (other.isSetSuccess()) {
        this.success = new FaceSearchCountResult(other.success);
      }
    }

    public faceSearchCountByCamera_result deepCopy() {
      return new faceSearchCountByCamera_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FaceSearchCountResult getSuccess() {
      return this.success;
    }

    public void setSuccess(FaceSearchCountResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FaceSearchCountResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof faceSearchCountByCamera_result)
        return this.equals((faceSearchCountByCamera_result)that);
      return false;
    }

    public boolean equals(faceSearchCountByCamera_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(faceSearchCountByCamera_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("faceSearchCountByCamera_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class faceSearchCountByCamera_resultStandardSchemeFactory implements SchemeFactory {
      public faceSearchCountByCamera_resultStandardScheme getScheme() {
        return new faceSearchCountByCamera_resultStandardScheme();
      }
    }

    private static class faceSearchCountByCamera_resultStandardScheme extends StandardScheme<faceSearchCountByCamera_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, faceSearchCountByCamera_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FaceSearchCountResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, faceSearchCountByCamera_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class faceSearchCountByCamera_resultTupleSchemeFactory implements SchemeFactory {
      public faceSearchCountByCamera_resultTupleScheme getScheme() {
        return new faceSearchCountByCamera_resultTupleScheme();
      }
    }

    private static class faceSearchCountByCamera_resultTupleScheme extends TupleScheme<faceSearchCountByCamera_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, faceSearchCountByCamera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, faceSearchCountByCamera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FaceSearchCountResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
